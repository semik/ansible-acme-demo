
- name: Let's encrypt Ansible ACME example
  hosts: localhost

  tasks:
    - name: Set vars
      ansible.builtin.set_fact:
        acme_directory: "https://czertainly.local/api/v1/protocols/acme/ACME_WebServers/directory"
        acme_version: 2
        acme_register_account: true
        acme_web_dir: "/var/www/html"
        acme_force: false
        acme_account_email: "email@example.com"
        bind: "{{ lookup('file', 'vars/czertainly.private') | from_yaml }}"

    - name: Set default ACME method
      ansible.builtin.set_fact:
        acme_method: 'http-01'
        when: acme_method is not defined

    - name: Generate private key for ACME account
      community.crypto.openssl_privatekey:
        path: "tmp/acme_account_key"
        type: RSA
        size: 2048
        mode: 0600

    - name: Register ACME Account without external binding
      community.crypto.acme_account:
        account_key_src: "tmp/acme_account_key"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        state: present
        terms_agreed: true
        contact:
          - "mailto:{{ acme_account_email }}"
      register: acme_account
      when: acme_register_account

    - name: Generate private key for server
      community.crypto.openssl_privatekey:
        path: "tmp/{{ acme_domain }}.key"
        type: RSA
        size: 2048
        mode: 0600

    - name: Generate certificate signing request (CSR)
      community.crypto.openssl_csr:
        path: "tmp/{{ acme_domain }}.csr"
        privatekey_path: "tmp/{{ acme_domain }}.key"
        common_name: "{{ acme_domain }}"
        subject_alt_name: "DNS:{{ acme_domain }}"

    - name: Create a challenge
      community.crypto.acme_certificate:
        account_key_src: "tmp/acme_account_key"
        account_email: "{{ acme_account_email }}"
        csr: "tmp/{{ acme_domain }}.csr"
        dest: "tmp/{{ acme_domain }}}.crt"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        terms_agreed: true
        force: "{{ acme_force }}"
        modify_account: false
        challenge: "{{ acme_method }}"
      register: acme_challenge

    - name: Show challenge
      ansible.builtin.debug: var=acme_challenge

    - name: Copy http-01 challenge data
      ansible.builtin.copy:
        dest: "{{ acme_web_dir }}/{{ item.value['http-01']['resource'] }}"
        content: "{{ item.value['http-01']['resource_value'] }}"
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"
      when: acme_method == 'http-01'

    - name: Add dns-01 challenge data to DNS
      community.general.nsupdate:
        key_algorithm: "{{ bind.key_algorithm }}"
        key_name: "{{ bind.key_name }}"
        key_secret: "{{ bind.key_secret }}"
        server: "{{ bind.server }}"
        record: "{{ item.value['dns-01']['record'] }}."
        type: "TXT"
        value: "{{ item.value['dns-01']['resource_value'] | regex_replace('^(.*)$', '\"\\1\"') }}"
        state: present
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"
      when: acme_method == 'dns-01'

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_key_src: "tmp/acme_account_key"
        csr: "tmp/{{ acme_domain }}.csr"
        dest: "tmp/{{ acme_domain }}.crt"
        fullchain_dest: "tmp/{{ acme_domain }}-fullchain.crt"
        chain_dest: "tmp/{{ acme_domain }}-intermediate.crt"
        data: "{{ acme_challenge }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        terms_agreed: true
        force: "{{ acme_force }}"
        modify_account: false
        challenge: "{{ acme_method }}"
      async: 120

    - name: Clean http-01 challenge data from drive
      ansible.builtin.file:
        path: "{{ acme_web_dir }}/{{ item.value['http-01'].resource }}"
        state: absent
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"
      when: acme_method == 'http-01'

    - name: Clean dns-01 challenge data from DNS
      community.general.nsupdate:
        key_algorithm: "{{ bind.key_algorithm }}"
        key_name: "{{ bind.key_name }}"
        key_secret: "{{ bind.key_secret }}"
        server: "{{ bind.server }}"
        record: "{{ item.value['dns-01'].record }}."
        type: "TXT"
        state: absent
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"
      when: acme_method == 'dns-01'
