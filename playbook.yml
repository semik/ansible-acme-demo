---
- name: Let's encrypt Ansible ACME example
  hosts: localhost

  tasks:
    - name: Set acme_domain
      ansible.builtin.set_fact:
        acme_domain:  "example.com"
        when: acme_domain is not defined

    - name: Set acme_web_dir
      ansible.builtin.set_fact:
        acme_web_dir: "/var/www/html"
        when: acme_web_dir is not defined

    - name: Set acme_directory
      ansible.builtin.set_fact:
        acme_directory: "https://acme-staging-v02.api.letsencrypt.org/directory"
        when: acme_directory is not defined

    - name: Set acme_force
      ansible.builtin.set_fact:
        acme_force: false
        when: acme_force is not defined

    - name: Generate private key for ACME account
      community.crypto.openssl_privatekey:
        path: "tmp/acme_account_key"
        type: RSA
        size: 2048
        mode: 0600

    - name: Generate private key for server
      community.crypto.openssl_privatekey:
        path: "tmp/{{ acme_domain }}.key"
        type: RSA
        size: 2048
        mode: 0600

    - name: Generate certificate signing request (CSR)
      openssl_csr:
        path: "tmp/{{ acme_domain }}.csr"
        privatekey_path: "tmp/{{ acme_domain }}.key"
        common_name: "{{ acme_domain }}"
        subject_alt_name: "DNS:www.{{ acme_domain }},DNS:{{ acme_domain }}"

    - name: Check if previous certificate exists
      stat:
        path: "tmp/{{ acme_domain }}.crt"
      register: prev_cert

    - name: Revoke previous certificate
      community.crypto.acme_certificate_revoke:
        account_key_src: "tmp/acme_account_key"
        certificate: "tmp/{{ acme_domain }}.crt"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
      when: prev_cert.stat.exists

    - name: Create a challenge
      community.crypto.acme_certificate:
        account_key_src: "tmp/acme_account_key"
        account_email: jan@tomasek.cz
        csr: "tmp/{{ acme_domain }}.csr"
        dest: "tmp/{{ acme_domain }}}.crt"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        terms_agreed: true
        force: "{{ acme_force }}"
      register: acme_challenge

    # - name: Show challenge
    #   debug: var=acme_challenge

    - name: Copy HTTP-01 challenge data
      copy:
        dest: "{{ acme_web_dir }}/{{ item.value['http-01']['resource'] }}"
        content: "{{ item.value['http-01']['resource_value'] }}"
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_key_src: "tmp/acme_account_key"
        csr: "tmp/{{ acme_domain }}.csr"
        dest: "tmp/{{ acme_domain }}.crt"
        fullchain_dest: "tmp/{{ acme_domain }}-fullchain.crt"
        chain_dest: "tmp/{{ acme_domain }}-intermediate.crt"
        data: "{{ acme_challenge }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        terms_agreed: true
        force: "{{ acme_force }}"

    - name: Clean HTTP-01 challenge data
      file:
        path: "{{ acme_web_dir }}/{{ item.value['http-01']['resource'] }}"
        state: absent
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"
