---
- name: Let's encrypt Ansible ACME example
  hosts: localhost

  tasks:
    - name: Set acme_web_dir
      ansible.builtin.set_fact:
        acme_web_dir: "/var/www/html"
        when: acme_web_dir is not defined

    - name: Set acme_force
      ansible.builtin.set_fact:
        acme_force: false
        when: acme_force is not defined

    - name: Set acme_register_account
      ansible.builtin.set_fact:
        acme_register_account: false
        when: acme_register_account is not defined

    - name: Generate private key for ACME account
      community.crypto.openssl_privatekey:
        path: "tmp/acme_account_key"
        type: RSA
        size: 2048
        mode: 0600

    - debug: var=acme_external_account_binding

    - name: Register ACME Account with external binding
      community.crypto.acme_account:
        account_key_src: "tmp/acme_account_key"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        state: present
        terms_agreed: true
        contact:
          - "mailto:{{ acme_account_email }}"
        external_account_binding:
          "{{ lookup('file', acme_external_account_binding_file) | from_yaml }}"
      register: acme_account
      when: acme_register_account and acme_external_account_binding_file is defined

    - name: Register ACME Account without external binding
      community.crypto.acme_account:
        account_key_src: "tmp/acme_account_key"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        state: present
        terms_agreed: true
        contact:
          - "mailto:{{ acme_account_email }}"
      register: acme_account
      when: acme_register_account and acme_external_account_binding_file is not defined

    - name: Generate private key for server
      community.crypto.openssl_privatekey:
        path: "tmp/{{ acme_domain }}.key"
        type: RSA
        size: 2048
        mode: 0600

    - name: Generate certificate signing request (CSR)
      openssl_csr:
        path: "tmp/{{ acme_domain }}.csr"
        privatekey_path: "tmp/{{ acme_domain }}.key"
        common_name: "{{ acme_domain }}"
        subject_alt_name: "DNS:www.{{ acme_domain }},DNS:{{ acme_domain }}"

    - name: Check if previous certificate exists
      stat:
        path: "tmp/{{ acme_domain }}.crt"
      register: prev_cert

    - name: Revoke previous certificate
      community.crypto.acme_certificate_revoke:
        account_key_src: "tmp/acme_account_key"
        certificate: "tmp/{{ acme_domain }}.crt"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
      when: prev_cert.stat.exists and acme_revoke

    - name: Create a challenge
      community.crypto.acme_certificate:
        account_key_src: "tmp/acme_account_key"
        account_email: jan@tomasek.cz
        csr: "tmp/{{ acme_domain }}.csr"
        dest: "tmp/{{ acme_domain }}}.crt"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        terms_agreed: true
        force: "{{ acme_force }}"
        modify_account: false
      register: acme_challenge

    - name: Show challenge
      debug: var=acme_challenge

    - name: Copy HTTP-01 challenge data
      copy:
        dest: "{{ acme_web_dir }}/{{ item.value['http-01']['resource'] }}"
        content: "{{ item.value['http-01']['resource_value'] }}"
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_key_src: "tmp/acme_account_key"
        csr: "tmp/{{ acme_domain }}.csr"
        dest: "tmp/{{ acme_domain }}.crt"
        fullchain_dest: "tmp/{{ acme_domain }}-fullchain.crt"
        chain_dest: "tmp/{{ acme_domain }}-intermediate.crt"
        data: "{{ acme_challenge }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        terms_agreed: true
        force: "{{ acme_force }}"
        modify_account: false

    - name: Clean HTTP-01 challenge data
      file:
        path: "{{ acme_web_dir }}/{{ item.value['http-01']['resource'] }}"
        state: absent
      with_dict:
        - "{{ acme_challenge['challenge_data'] }}"
